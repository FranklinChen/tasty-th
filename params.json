{"name":"Test-generator","body":"# test-framework-th\r\n\r\nHaskell-module to automagically generate repetetive code when writing HUnit/Quickcheck/Quickcheck2-tests.\r\n\r\n## testGroupGenerator\r\n\r\n### signature\r\n\r\n    testGroupGenerator :: ExpQ\r\n\r\n### usage\r\n\r\n    myTestGroup = $(testGroupGenerator)\r\n\r\n### example\r\n\r\n    -- file SomeModule.hs\r\n    {-# LANGUAGE TemplateHaskell #-}\r\n    module SomeModule where\r\n    import Test.Framework.TH\r\n    import Test.Framework\r\n    import Test.HUnit\r\n    import Test.Framework.Providers.HUnit\r\n    import Test.Framework.Providers.QuickCheck2\r\n   \r\n    -- observe this line! \r\n    fooTestGroup = $(testGroupGenerator)\r\n    main = defaultMain [fooTestGroup]\r\n    case_1 = do 1 @=? 1\r\n    case_2 = do 2 @=? 2\r\n    prop_reverse xs = reverse (reverse xs) == xs\r\n       where types = xs::[Int]\r\n\r\nis the same as\r\n\r\n\r\n    -- file SomeModule.hs\r\n    {-# LANGUAGE TemplateHaskell #-}\r\n    module SomeModule where\r\n    import Test.Framework.TH\r\n    import Test.Framework\r\n    import Test.HUnit\r\n    import Test.Framework.Providers.HUnit\r\n    import Test.Framework.Providers.QuickCheck2\r\n    \r\n    -- observe this line!\r\n    fooTestGroup = testGroup \"SomeModule\" [testCase \"1\" case_1, testCase \"2\" case_2, testProperty \"reverse\" prop_reverse]\r\n    main = defaultMain [fooTestGroup]\r\n    case_1 = do 1 @=? 1\r\n    case_2 = do 2 @=? 2\r\n    prop_reverse xs = reverse (reverse xs) == xs\r\n       where types = xs::[Int]\r\n\r\n\r\n## defaultMainGenerator\r\n\r\n### signature\r\n\r\n    defaultMainGenerator :: ExpQ\r\n\r\n### usage\r\n\r\n    main = $(defaultMainGenerator)\r\n\r\n### example\r\n\r\n\r\n    -- file SomeModule.hs\r\n    {-# LANGUAGE TemplateHaskell #-}\r\n    module SomeModule where\r\n    import Test.Framework.TH\r\n    import Test.Framework\r\n    import Test.HUnit\r\n    import Test.Framework.Providers.HUnit\r\n    import Test.Framework.Providers.QuickCheck2\r\n   \r\n    -- observe this line! \r\n    main = $(defaultMainGenerator)\r\n    case_1 = do 1 @=? 1\r\n    case_2 = do 2 @=? 2\r\n    prop_reverse xs = reverse (reverse xs) == xs\r\n       where types = xs::[Int]\r\n\r\n\r\nwill automagically extract prop_reverse, case_1 and case_2 and run them as well as present them as belonging to the testGroup 'SomeModule'. The above code is the same as\r\n\r\n    -- file SomeModule.hs\r\n    {-# LANGUAGE TemplateHaskell #-}\r\n    module SomeModule where\r\n    import Test.Framework.TH\r\n    import Test.Framework\r\n    import Test.HUnit\r\n    import Test.Framework.Providers.HUnit\r\n    import Test.Framework.Providers.QuickCheck2\r\n   \r\n    -- observe this line! \r\n    main =\r\n      defaultMain [\r\n        testGroup \"SomeModule\" [ testCase \"1\" case_1, testCase \"2\" case_2, testProperty \"reverse\" prop_reverse]\r\n        ]\r\n\r\n    case_1 = do 1 @=? 1\r\n    case_2 = do 2 @=? 2\r\n    prop_reverse xs = reverse (reverse xs) == xs\r\n       where types = xs::[Int]\r\n\r\n\r\nand will give the following result\r\n\r\n    me: runghc MyModuleTest.hs \r\n    MyModuleTest:\r\n      reverse: [OK, passed 100 tests]\r\n      1: [OK]\r\n      2: [OK]\r\n     \r\n            Properties  Test Cases  Total      \r\n    Passed  1           2           3          \r\n    Failed  0           0           0          \r\n    Total   1           2           3 \r\n","tagline":"Automagically (using Template Haskell) generates the Haskell-code you need when using HUnit","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}